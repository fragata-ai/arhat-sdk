
package main

import "fragata/arhat/front/models"

//
//    Vgg19Onnx
//

func Vgg19Onnx() *models.Model {
    m := models.NewModel()
    external1 := m.External("shape", []int{10, 3, 224, 224})
    variable1 := m.Variable("label", "vgg0_conv0_weight", "shape", []int{64, 3, 3, 3})
    variable2 := m.Variable("label", "vgg0_conv0_bias", "shape", []int{64})
    variable3 := m.Variable("label", "vgg0_conv1_weight", "shape", []int{64, 64, 3, 3})
    variable4 := m.Variable("label", "vgg0_conv1_bias", "shape", []int{64})
    variable5 := m.Variable("label", "vgg0_conv2_weight", "shape", []int{128, 64, 3, 3})
    variable6 := m.Variable("label", "vgg0_conv2_bias", "shape", []int{128})
    variable7 := m.Variable("label", "vgg0_conv3_weight", "shape", []int{128, 128, 3, 3})
    variable8 := m.Variable("label", "vgg0_conv3_bias", "shape", []int{128})
    variable9 := m.Variable("label", "vgg0_conv4_weight", "shape", []int{256, 128, 3, 3})
    variable10 := m.Variable("label", "vgg0_conv4_bias", "shape", []int{256})
    variable11 := m.Variable("label", "vgg0_conv5_weight", "shape", []int{256, 256, 3, 3})
    variable12 := m.Variable("label", "vgg0_conv5_bias", "shape", []int{256})
    variable13 := m.Variable("label", "vgg0_conv6_weight", "shape", []int{256, 256, 3, 3})
    variable14 := m.Variable("label", "vgg0_conv6_bias", "shape", []int{256})
    variable15 := m.Variable("label", "vgg0_conv7_weight", "shape", []int{256, 256, 3, 3})
    variable16 := m.Variable("label", "vgg0_conv7_bias", "shape", []int{256})
    variable17 := m.Variable("label", "vgg0_conv8_weight", "shape", []int{512, 256, 3, 3})
    variable18 := m.Variable("label", "vgg0_conv8_bias", "shape", []int{512})
    variable19 := m.Variable("label", "vgg0_conv9_weight", "shape", []int{512, 512, 3, 3})
    variable20 := m.Variable("label", "vgg0_conv9_bias", "shape", []int{512})
    variable21 := m.Variable("label", "vgg0_conv10_weight", "shape", []int{512, 512, 3, 3})
    variable22 := m.Variable("label", "vgg0_conv10_bias", "shape", []int{512})
    variable23 := m.Variable("label", "vgg0_conv11_weight", "shape", []int{512, 512, 3, 3})
    variable24 := m.Variable("label", "vgg0_conv11_bias", "shape", []int{512})
    variable25 := m.Variable("label", "vgg0_conv12_weight", "shape", []int{512, 512, 3, 3})
    variable26 := m.Variable("label", "vgg0_conv12_bias", "shape", []int{512})
    variable27 := m.Variable("label", "vgg0_conv13_weight", "shape", []int{512, 512, 3, 3})
    variable28 := m.Variable("label", "vgg0_conv13_bias", "shape", []int{512})
    variable29 := m.Variable("label", "vgg0_conv14_weight", "shape", []int{512, 512, 3, 3})
    variable30 := m.Variable("label", "vgg0_conv14_bias", "shape", []int{512})
    variable31 := m.Variable("label", "vgg0_conv15_weight", "shape", []int{512, 512, 3, 3})
    variable32 := m.Variable("label", "vgg0_conv15_bias", "shape", []int{512})
    variable33 := m.Variable("label", "vgg0_dense0_weight", "shape", []int{4096, 25088})
    variable34 := m.Variable("label", "vgg0_dense0_bias", "shape", []int{4096})
    variable35 := m.Variable("label", "vgg0_dense1_weight", "shape", []int{4096, 4096})
    variable36 := m.Variable("label", "vgg0_dense1_bias", "shape", []int{4096})
    variable37 := m.Variable("label", "vgg0_dense2_weight", "shape", []int{1000, 4096})
    variable38 := m.Variable("label", "vgg0_dense2_bias", "shape", []int{1000})
    conv1 := m.Conv(external1, variable1, variable2, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu1 := m.Relu(conv1)
    conv2 := m.Conv(relu1, variable3, variable4, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu2 := m.Relu(conv2)
    maxPool1 := m.MaxPool(relu2, "kernel", []int{2, 2}, "stride", []int{2, 2})
    conv3 := m.Conv(maxPool1, variable5, variable6, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu3 := m.Relu(conv3)
    conv4 := m.Conv(relu3, variable7, variable8, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu4 := m.Relu(conv4)
    reshape1 := m.Reshape(variable38, "shape", []int{1, -1})
    reshape2 := m.Reshape(variable36, "shape", []int{1, -1})
    reshape3 := m.Reshape(variable34, "shape", []int{1, -1})
    maxPool2 := m.MaxPool(relu4, "kernel", []int{2, 2}, "stride", []int{2, 2})
    conv5 := m.Conv(maxPool2, variable9, variable10, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu5 := m.Relu(conv5)
    conv6 := m.Conv(relu5, variable11, variable12, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu6 := m.Relu(conv6)
    conv7 := m.Conv(relu6, variable13, variable14, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu7 := m.Relu(conv7)
    conv8 := m.Conv(relu7, variable15, variable16, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu8 := m.Relu(conv8)
    maxPool3 := m.MaxPool(relu8, "kernel", []int{2, 2}, "stride", []int{2, 2})
    conv9 := m.Conv(maxPool3, variable17, variable18, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu9 := m.Relu(conv9)
    conv10 := m.Conv(relu9, variable19, variable20, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu10 := m.Relu(conv10)
    conv11 := m.Conv(relu10, variable21, variable22, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu11 := m.Relu(conv11)
    conv12 := m.Conv(relu11, variable23, variable24, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu12 := m.Relu(conv12)
    maxPool4 := m.MaxPool(relu12, "kernel", []int{2, 2}, "stride", []int{2, 2})
    conv13 := m.Conv(maxPool4, variable25, variable26, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu13 := m.Relu(conv13)
    conv14 := m.Conv(relu13, variable27, variable28, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu14 := m.Relu(conv14)
    conv15 := m.Conv(relu14, variable29, variable30, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu15 := m.Relu(conv15)
    conv16 := m.Conv(relu15, variable31, variable32, "kernel", []int{3, 3}, "pads", []int{1, 1, 1, 1})
    relu16 := m.Relu(conv16)
    maxPool5 := m.MaxPool(relu16, "kernel", []int{2, 2}, "stride", []int{2, 2})
    reshape4 := m.Reshape(maxPool5, "shape", []int{0, -1})
    matmul1 := m.Matmul(reshape4, variable33, "transB", true)
    add1 := m.Add(matmul1, reshape3)
    relu17 := m.Relu(add1)
    reshape5 := m.Reshape(relu17, "shape", []int{0, -1})
    matmul2 := m.Matmul(reshape5, variable35, "transB", true)
    add2 := m.Add(matmul2, reshape2)
    relu18 := m.Relu(add2)
    reshape6 := m.Reshape(relu18, "shape", []int{0, -1})
    matmul3 := m.Matmul(reshape6, variable37, "transB", true)
    add3 := m.Add(matmul3, reshape1)
    softmax1 := m.Softmax(add3, "axis", 1)
    m.AddOutput(softmax1.OutputAt(0))
    return m
}

